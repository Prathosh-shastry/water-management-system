#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266mDNS.h>
#include <ESP8266WebServer.h>
ESP8266WiFiMulti wifiMulti;
ESP8266WebServer server(80);
void handleRoot();
void handleLogin();
void handleNotFound();
const int solpin=D1;
const int buttonPin = D2;
String val;
int ba=1;
byte sensorInterrupt = 0 ; // 0 = digital pin 2
float calibrationFactor = 4.5 ;
volatile byte pulseCount;
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;
unsigned long oldTime;
void setup(void){
 Serial.begin(115200);
 delay(10);
 Serial.println('\n');
 wifiMulti.addAP("Hon", "m");
 wifiMulti.addAP("ssid_from_AP_2", "your_password_for_AP_2");
 wifiMulti.addAP("ssid_from_AP_3", "your_password_for_AP_3");
 Serial.println("Connecting ...");
 int i = 0;
 while (wifiMulti.run() != WL_CONNECTED) { // Wait for the Wi-Fi to connect: scan for Wi-Fi networks, and connect to
the strongest of the networks above
 delay(250);
 Serial.print('.');
 }
 Serial.println('\n');
 Serial.print("Connected to ");
 Serial.println(WiFi.SSID());
 Serial.print("IP address:\t");
 Serial.println(WiFi.localIP());
 if (MDNS.begin("esp8266")) {
 Serial.println("mDNS responder started");
 } else {
 Serial.println("Error setting up MDNS responder!");
 }
 server.on("/", HTTP_GET, handleRoot); // Call the 'handleRoot' function when a client requests URI "/"
 server.on("/login", HTTP_POST, handleLogin); // Call the 'handleLogin' function when a POST request is made to URI
"/login"
 server.onNotFound(handleNotFound); // When a client requests an unknown URI (i.e. something other than
"/"), call function "handleNotFound"
 server.begin(); // Actually start the server
 Serial.println("HTTP server started");

 pinMode (buttonPin, INPUT);

 pinMode (solpin, OUTPUT);


 pulseCount = 0 ;
 flowRate = 0.0 ;
 flowMilliLitres = 0 ;
 totalMilliLitres = 0 ;
 oldTime = 0 ;
 digitalWrite(solpin,LOW);
 digitalWrite (buttonPin, HIGH);
 attachInterrupt ( digitalPinToInterrupt (buttonPin), pulseCounter, RISING);
}
void loop(void){
 server.handleClient();
 if((flowRate ==0.0) && (totalMilliLitres==0))
 {
 digitalWrite(solpin,LOW);
 }
else if((totalMilliLitres) >= (ba))
 {

 digitalWrite(solpin,LOW);
 delay(1000);
 while(1);
 delay(1000);
 }

 else
 {
 digitalWrite(solpin,HIGH);
 }

 if (( millis () - oldTime)> 1000 ) // Only process counters once per second
 {
 // Disable the interrupt while calculating the flow rate and sending the value to
 // the host
 detachInterrupt (sensorInterrupt);
 // Because this loop may not complete in exactly 1 second intervals we calculate
 // the number of milliseconds that has passed since the last execution and use
 // that to scale the output. We also apply the calibrationFactor to scale the output
 // based on the number of pulses per second per unit of measure (litres / minute in
 // this case) coming from the sensor.
 flowRate = (( 1000.0 / ( millis () - oldTime)) * pulseCount) / calibrationFactor;
 // Note the time this processing pass was executed. Note that because we've
 // disabled interrupts the millis () function will not actually be incrementing right
 // at this point, but it will still return the value it was set to just before
 // interrupts went away.
 oldTime = millis ();
 // Divide the flow rate in liters / minute by 60 to determine how many liters have
 // passed through the sensor in this 1 second interval, then multiply by 1000 to
 // convert to millilitres.
 flowMilliLitres = (flowRate / 60 ) * 1000 ;
 // Add the millilitres passed in this second to the total cumulative
 totalMilliLitres += flowMilliLitres;
 unsigned int frac;
 // Print the flow rate for this second in litres / minute
 Serial. print ( " Flow rate: " );
 Serial. print ( int (flowRate)); // Print the integer part of the variable
 Serial. print ( " . " ); // Print the decimal point
 // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
 frac = (flowRate - int (flowRate)) * 10 ;
 Serial. print (frac, DEC); // Print the fractional part of the variable
 Serial. print ( " L / min " );
 // Print the number of litres flowed in this second
 Serial. print ( " Current Liquid Flowing: " ); // Output separator
 Serial. print (flowMilliLitres);
 Serial. print ( " mL / Sec " );
 // Print the cumulative total of litres flowed since starting
 Serial. print ( " Liquid Quantity Output: " ); // Output separator
 Serial. print (totalMilliLitres);
 Serial. println ( " mL " );


 // Reset the pulse counter so we can start incrementing again
 pulseCount = 0 ;
 // Enable the interrupt again now that we've finished sending output
 attachInterrupt (sensorInterrupt, pulseCounter, FALLING);
}
}
void pulseCounter () {
 // Increment the pulse counter
 pulseCount ++;
}
void handleRoot() { // When URI / is requested, send a web page with a button to toggle the LED
 server.send(200, "text/html", "<form action=\"/login\" method=\"POST\"><input type=\"number\"
name=\"quantity\" placeholder=\"liters\"></br><input type=\"submit\" value=\"enter\"></form>");
}
void handleLogin() { // If a POST request is made to URI /login
 if( ! server.hasArg("quantity") || server.arg("quantity") == NULL ) { // If the POST request doesn't have username and
password data
 server.send(400, "text/plain", "400: Invalid Request"); // The request is invalid, so send HTTP status 400
 return;
 }
 else
 { // If both the username and the password are correct
 server.send(200, "text/html", "<h1>value " + server.arg("quantity") + "!</h1><p>sent!!</p>");
 String val;
 val = server.arg("quantity");
 Serial.println(val);
 ba=val.toInt();
 Serial.println(ba);
 digitalWrite(solpin,HIGH);
 }
}
void handleNotFound()
{
 server.send(404, "text/plain", "404: Not found"); // Send HTTP status 404 (Not Found) when there's no handler for
the URI in the request
}